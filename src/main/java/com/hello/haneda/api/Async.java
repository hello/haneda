// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: async.proto

package com.hello.haneda.api;

public final class Async {
  private Async() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface AckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Ack)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 message_id = 1;</code>
     */
    boolean hasMessageId();
    /**
     * <code>optional uint64 message_id = 1;</code>
     */
    long getMessageId();

    /**
     * <code>optional .Ack.Status status = 2;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional .Ack.Status status = 2;</code>
     */
    com.hello.haneda.api.Async.Ack.Status getStatus();
  }
  /**
   * Protobuf type {@code Ack}
   */
  public static final class Ack extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Ack)
      AckOrBuilder {
    // Use Ack.newBuilder() to construct.
    private Ack(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Ack(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Ack defaultInstance;
    public static Ack getDefaultInstance() {
      return defaultInstance;
    }

    public Ack getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Ack(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              messageId_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.hello.haneda.api.Async.Ack.Status value = com.hello.haneda.api.Async.Ack.Status.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                status_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.hello.haneda.api.Async.internal_static_Ack_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.hello.haneda.api.Async.internal_static_Ack_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.hello.haneda.api.Async.Ack.class, com.hello.haneda.api.Async.Ack.Builder.class);
    }

    public static com.google.protobuf.Parser<Ack> PARSER =
        new com.google.protobuf.AbstractParser<Ack>() {
      public Ack parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ack(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Ack> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Ack.Status}
     */
    public enum Status
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SUCCESS = 1;</code>
       *
       * <pre>
       * All good in the hood (2xx response)
       * </pre>
       */
      SUCCESS(0, 1),
      /**
       * <code>CLIENT_ENCODING_ERROR = 2;</code>
       *
       * <pre>
       * Message was improperly formatted before reading payload
       * </pre>
       */
      CLIENT_ENCODING_ERROR(1, 2),
      /**
       * <code>CLIENT_REQUEST_ERROR = 3;</code>
       *
       * <pre>
       * Payload of the message was incorrect (4xx error)
       * </pre>
       */
      CLIENT_REQUEST_ERROR(2, 3),
      /**
       * <code>SERVER_ERROR = 4;</code>
       *
       * <pre>
       * A server-side error occurred (5xx error)
       * </pre>
       */
      SERVER_ERROR(3, 4),
      ;

      /**
       * <code>SUCCESS = 1;</code>
       *
       * <pre>
       * All good in the hood (2xx response)
       * </pre>
       */
      public static final int SUCCESS_VALUE = 1;
      /**
       * <code>CLIENT_ENCODING_ERROR = 2;</code>
       *
       * <pre>
       * Message was improperly formatted before reading payload
       * </pre>
       */
      public static final int CLIENT_ENCODING_ERROR_VALUE = 2;
      /**
       * <code>CLIENT_REQUEST_ERROR = 3;</code>
       *
       * <pre>
       * Payload of the message was incorrect (4xx error)
       * </pre>
       */
      public static final int CLIENT_REQUEST_ERROR_VALUE = 3;
      /**
       * <code>SERVER_ERROR = 4;</code>
       *
       * <pre>
       * A server-side error occurred (5xx error)
       * </pre>
       */
      public static final int SERVER_ERROR_VALUE = 4;


      public final int getNumber() { return value; }

      public static Status valueOf(int value) {
        switch (value) {
          case 1: return SUCCESS;
          case 2: return CLIENT_ENCODING_ERROR;
          case 3: return CLIENT_REQUEST_ERROR;
          case 4: return SERVER_ERROR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Status>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Status>() {
              public Status findValueByNumber(int number) {
                return Status.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.hello.haneda.api.Async.Ack.getDescriptor().getEnumTypes().get(0);
      }

      private static final Status[] VALUES = values();

      public static Status valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Status(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Ack.Status)
    }

    private int bitField0_;
    public static final int MESSAGE_ID_FIELD_NUMBER = 1;
    private long messageId_;
    /**
     * <code>optional uint64 message_id = 1;</code>
     */
    public boolean hasMessageId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 message_id = 1;</code>
     */
    public long getMessageId() {
      return messageId_;
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private com.hello.haneda.api.Async.Ack.Status status_;
    /**
     * <code>optional .Ack.Status status = 2;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .Ack.Status status = 2;</code>
     */
    public com.hello.haneda.api.Async.Ack.Status getStatus() {
      return status_;
    }

    private void initFields() {
      messageId_ = 0L;
      status_ = com.hello.haneda.api.Async.Ack.Status.SUCCESS;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, messageId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, status_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, messageId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, status_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.hello.haneda.api.Async.Ack parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.hello.haneda.api.Async.Ack parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.hello.haneda.api.Async.Ack parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.hello.haneda.api.Async.Ack parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.hello.haneda.api.Async.Ack prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Ack}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Ack)
        com.hello.haneda.api.Async.AckOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.hello.haneda.api.Async.internal_static_Ack_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.hello.haneda.api.Async.internal_static_Ack_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.hello.haneda.api.Async.Ack.class, com.hello.haneda.api.Async.Ack.Builder.class);
      }

      // Construct using com.hello.haneda.api.Async.Ack.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        messageId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = com.hello.haneda.api.Async.Ack.Status.SUCCESS;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.hello.haneda.api.Async.internal_static_Ack_descriptor;
      }

      public com.hello.haneda.api.Async.Ack getDefaultInstanceForType() {
        return com.hello.haneda.api.Async.Ack.getDefaultInstance();
      }

      public com.hello.haneda.api.Async.Ack build() {
        com.hello.haneda.api.Async.Ack result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.hello.haneda.api.Async.Ack buildPartial() {
        com.hello.haneda.api.Async.Ack result = new com.hello.haneda.api.Async.Ack(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.messageId_ = messageId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.status_ = status_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.hello.haneda.api.Async.Ack) {
          return mergeFrom((com.hello.haneda.api.Async.Ack)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.hello.haneda.api.Async.Ack other) {
        if (other == com.hello.haneda.api.Async.Ack.getDefaultInstance()) return this;
        if (other.hasMessageId()) {
          setMessageId(other.getMessageId());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.hello.haneda.api.Async.Ack parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.hello.haneda.api.Async.Ack) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long messageId_ ;
      /**
       * <code>optional uint64 message_id = 1;</code>
       */
      public boolean hasMessageId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 message_id = 1;</code>
       */
      public long getMessageId() {
        return messageId_;
      }
      /**
       * <code>optional uint64 message_id = 1;</code>
       */
      public Builder setMessageId(long value) {
        bitField0_ |= 0x00000001;
        messageId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 message_id = 1;</code>
       */
      public Builder clearMessageId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        messageId_ = 0L;
        onChanged();
        return this;
      }

      private com.hello.haneda.api.Async.Ack.Status status_ = com.hello.haneda.api.Async.Ack.Status.SUCCESS;
      /**
       * <code>optional .Ack.Status status = 2;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Ack.Status status = 2;</code>
       */
      public com.hello.haneda.api.Async.Ack.Status getStatus() {
        return status_;
      }
      /**
       * <code>optional .Ack.Status status = 2;</code>
       */
      public Builder setStatus(com.hello.haneda.api.Async.Ack.Status value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Ack.Status status = 2;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = com.hello.haneda.api.Async.Ack.Status.SUCCESS;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Ack)
    }

    static {
      defaultInstance = new Ack(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Ack)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Ack_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Ack_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013async.proto\"\224\001\n\003Ack\022\022\n\nmessage_id\030\001 \001(" +
      "\004\022\033\n\006status\030\002 \001(\0162\013.Ack.Status\"\\\n\006Status" +
      "\022\013\n\007SUCCESS\020\001\022\031\n\025CLIENT_ENCODING_ERROR\020\002" +
      "\022\030\n\024CLIENT_REQUEST_ERROR\020\003\022\020\n\014SERVER_ERR" +
      "OR\020\004B\026\n\024com.hello.haneda.api"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Ack_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Ack_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Ack_descriptor,
        new java.lang.String[] { "MessageId", "Status", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
