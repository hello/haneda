// Code generated by protoc-gen-go.
// source: periodic.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	periodic.proto

It has these top-level messages:
	PeriodicData
	BatchedPeriodicData
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type BatchedPeriodicDataWifiAccessPoint_AntennaType int32

const (
	BatchedPeriodicDataWifiAccessPoint_IFA BatchedPeriodicDataWifiAccessPoint_AntennaType = 1
	BatchedPeriodicDataWifiAccessPoint_PCB BatchedPeriodicDataWifiAccessPoint_AntennaType = 2
)

var BatchedPeriodicDataWifiAccessPoint_AntennaType_name = map[int32]string{
	1: "IFA",
	2: "PCB",
}
var BatchedPeriodicDataWifiAccessPoint_AntennaType_value = map[string]int32{
	"IFA": 1,
	"PCB": 2,
}

func (x BatchedPeriodicDataWifiAccessPoint_AntennaType) Enum() *BatchedPeriodicDataWifiAccessPoint_AntennaType {
	p := new(BatchedPeriodicDataWifiAccessPoint_AntennaType)
	*p = x
	return p
}
func (x BatchedPeriodicDataWifiAccessPoint_AntennaType) String() string {
	return proto.EnumName(BatchedPeriodicDataWifiAccessPoint_AntennaType_name, int32(x))
}
func (x *BatchedPeriodicDataWifiAccessPoint_AntennaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BatchedPeriodicDataWifiAccessPoint_AntennaType_value, data, "BatchedPeriodicDataWifiAccessPoint_AntennaType")
	if err != nil {
		return err
	}
	*x = BatchedPeriodicDataWifiAccessPoint_AntennaType(value)
	return nil
}
func (BatchedPeriodicDataWifiAccessPoint_AntennaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 0}
}

type PeriodicData struct {
	UnixTime    *int32 `protobuf:"varint,1,opt,name=unix_time" json:"unix_time,omitempty"`
	Light       *int32 `protobuf:"varint,2,opt,name=light" json:"light,omitempty"`
	Temperature *int32 `protobuf:"varint,3,opt,name=temperature" json:"temperature,omitempty"`
	Humidity    *int32 `protobuf:"varint,4,opt,name=humidity" json:"humidity,omitempty"`
	Dust        *int32 `protobuf:"varint,5,opt,name=dust" json:"dust,omitempty"`
	// optional string name=6;
	// optional bytes mac=7;
	LightVariability *int32 `protobuf:"varint,8,opt,name=light_variability" json:"light_variability,omitempty"`
	LightTonality    *int32 `protobuf:"varint,9,opt,name=light_tonality" json:"light_tonality,omitempty"`
	// optional int32 firmware_version=10;
	// Please do not reuse index 11, it's for the removed pill_data.
	// optional string device_id = 12;
	DustVariability              *int32 `protobuf:"varint,13,opt,name=dust_variability" json:"dust_variability,omitempty"`
	DustMax                      *int32 `protobuf:"varint,14,opt,name=dust_max" json:"dust_max,omitempty"`
	DustMin                      *int32 `protobuf:"varint,15,opt,name=dust_min" json:"dust_min,omitempty"`
	WaveCount                    *int32 `protobuf:"varint,16,opt,name=wave_count" json:"wave_count,omitempty"`
	HoldCount                    *int32 `protobuf:"varint,17,opt,name=hold_count" json:"hold_count,omitempty"`
	AudioNumDisturbances         *int32 `protobuf:"varint,18,opt,name=audio_num_disturbances" json:"audio_num_disturbances,omitempty"`
	AudioPeakDisturbanceEnergyDb *int32 `protobuf:"varint,19,opt,name=audio_peak_disturbance_energy_db" json:"audio_peak_disturbance_energy_db,omitempty"`
	AudioPeakBackgroundEnergyDb  *int32 `protobuf:"varint,20,opt,name=audio_peak_background_energy_db" json:"audio_peak_background_energy_db,omitempty"`
	AudioPeakEnergyDb            *int32 `protobuf:"varint,21,opt,name=audio_peak_energy_db" json:"audio_peak_energy_db,omitempty"`
	XXX_unrecognized             []byte `json:"-"`
}

func (m *PeriodicData) Reset()                    { *m = PeriodicData{} }
func (m *PeriodicData) String() string            { return proto.CompactTextString(m) }
func (*PeriodicData) ProtoMessage()               {}
func (*PeriodicData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PeriodicData) GetUnixTime() int32 {
	if m != nil && m.UnixTime != nil {
		return *m.UnixTime
	}
	return 0
}

func (m *PeriodicData) GetLight() int32 {
	if m != nil && m.Light != nil {
		return *m.Light
	}
	return 0
}

func (m *PeriodicData) GetTemperature() int32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *PeriodicData) GetHumidity() int32 {
	if m != nil && m.Humidity != nil {
		return *m.Humidity
	}
	return 0
}

func (m *PeriodicData) GetDust() int32 {
	if m != nil && m.Dust != nil {
		return *m.Dust
	}
	return 0
}

func (m *PeriodicData) GetLightVariability() int32 {
	if m != nil && m.LightVariability != nil {
		return *m.LightVariability
	}
	return 0
}

func (m *PeriodicData) GetLightTonality() int32 {
	if m != nil && m.LightTonality != nil {
		return *m.LightTonality
	}
	return 0
}

func (m *PeriodicData) GetDustVariability() int32 {
	if m != nil && m.DustVariability != nil {
		return *m.DustVariability
	}
	return 0
}

func (m *PeriodicData) GetDustMax() int32 {
	if m != nil && m.DustMax != nil {
		return *m.DustMax
	}
	return 0
}

func (m *PeriodicData) GetDustMin() int32 {
	if m != nil && m.DustMin != nil {
		return *m.DustMin
	}
	return 0
}

func (m *PeriodicData) GetWaveCount() int32 {
	if m != nil && m.WaveCount != nil {
		return *m.WaveCount
	}
	return 0
}

func (m *PeriodicData) GetHoldCount() int32 {
	if m != nil && m.HoldCount != nil {
		return *m.HoldCount
	}
	return 0
}

func (m *PeriodicData) GetAudioNumDisturbances() int32 {
	if m != nil && m.AudioNumDisturbances != nil {
		return *m.AudioNumDisturbances
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakDisturbanceEnergyDb() int32 {
	if m != nil && m.AudioPeakDisturbanceEnergyDb != nil {
		return *m.AudioPeakDisturbanceEnergyDb
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakBackgroundEnergyDb() int32 {
	if m != nil && m.AudioPeakBackgroundEnergyDb != nil {
		return *m.AudioPeakBackgroundEnergyDb
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakEnergyDb() int32 {
	if m != nil && m.AudioPeakEnergyDb != nil {
		return *m.AudioPeakEnergyDb
	}
	return 0
}

type BatchedPeriodicData struct {
	Data            []*PeriodicData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	DeviceId        *string         `protobuf:"bytes,2,req,name=device_id" json:"device_id,omitempty"`
	FirmwareVersion *int32          `protobuf:"varint,3,req,name=firmware_version" json:"firmware_version,omitempty"`
	UptimeInSecond  *int32          `protobuf:"varint,4,opt,name=uptime_in_second" json:"uptime_in_second,omitempty"`
	// optional bool need_key = 5;
	// optional string serial = 6;
	ConnectedSsid *string `protobuf:"bytes,7,opt,name=connected_ssid" json:"connected_ssid,omitempty"`
	// repeated wifi_access_point scan = 8;
	RingTimeAck      *string                               `protobuf:"bytes,9,opt,name=ring_time_ack" json:"ring_time_ack,omitempty"`
	Scan             []*BatchedPeriodicDataWifiAccessPoint `protobuf:"bytes,10,rep,name=scan" json:"scan,omitempty"`
	MessagesInQueue  *int32                                `protobuf:"varint,11,opt,name=messages_in_queue" json:"messages_in_queue,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *BatchedPeriodicData) Reset()                    { *m = BatchedPeriodicData{} }
func (m *BatchedPeriodicData) String() string            { return proto.CompactTextString(m) }
func (*BatchedPeriodicData) ProtoMessage()               {}
func (*BatchedPeriodicData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BatchedPeriodicData) GetData() []*PeriodicData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchedPeriodicData) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BatchedPeriodicData) GetFirmwareVersion() int32 {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return 0
}

func (m *BatchedPeriodicData) GetUptimeInSecond() int32 {
	if m != nil && m.UptimeInSecond != nil {
		return *m.UptimeInSecond
	}
	return 0
}

func (m *BatchedPeriodicData) GetConnectedSsid() string {
	if m != nil && m.ConnectedSsid != nil {
		return *m.ConnectedSsid
	}
	return ""
}

func (m *BatchedPeriodicData) GetRingTimeAck() string {
	if m != nil && m.RingTimeAck != nil {
		return *m.RingTimeAck
	}
	return ""
}

func (m *BatchedPeriodicData) GetScan() []*BatchedPeriodicDataWifiAccessPoint {
	if m != nil {
		return m.Scan
	}
	return nil
}

func (m *BatchedPeriodicData) GetMessagesInQueue() int32 {
	if m != nil && m.MessagesInQueue != nil {
		return *m.MessagesInQueue
	}
	return 0
}

type BatchedPeriodicDataWifiAccessPoint struct {
	Ssid             *string                                         `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Rssi             *int32                                          `protobuf:"varint,2,opt,name=rssi" json:"rssi,omitempty"`
	Antenna          *BatchedPeriodicDataWifiAccessPoint_AntennaType `protobuf:"varint,3,opt,name=antenna,enum=BatchedPeriodicDataWifiAccessPoint_AntennaType" json:"antenna,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *BatchedPeriodicDataWifiAccessPoint) Reset()         { *m = BatchedPeriodicDataWifiAccessPoint{} }
func (m *BatchedPeriodicDataWifiAccessPoint) String() string { return proto.CompactTextString(m) }
func (*BatchedPeriodicDataWifiAccessPoint) ProtoMessage()    {}
func (*BatchedPeriodicDataWifiAccessPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetSsid() string {
	if m != nil && m.Ssid != nil {
		return *m.Ssid
	}
	return ""
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetRssi() int32 {
	if m != nil && m.Rssi != nil {
		return *m.Rssi
	}
	return 0
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetAntenna() BatchedPeriodicDataWifiAccessPoint_AntennaType {
	if m != nil && m.Antenna != nil {
		return *m.Antenna
	}
	return BatchedPeriodicDataWifiAccessPoint_IFA
}

func init() {
	proto.RegisterType((*PeriodicData)(nil), "periodic_data")
	proto.RegisterType((*BatchedPeriodicData)(nil), "batched_periodic_data")
	proto.RegisterType((*BatchedPeriodicDataWifiAccessPoint)(nil), "batched_periodic_data.wifi_access_point")
	proto.RegisterEnum("BatchedPeriodicDataWifiAccessPoint_AntennaType", BatchedPeriodicDataWifiAccessPoint_AntennaType_name, BatchedPeriodicDataWifiAccessPoint_AntennaType_value)
}

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0x1a, 0x31,
	0x10, 0x15, 0x6c, 0x22, 0xc2, 0x50, 0x08, 0x6c, 0x42, 0xe4, 0x46, 0x51, 0x13, 0x71, 0x29, 0xa7,
	0x3d, 0xa0, 0xaa, 0xf7, 0xd0, 0x0f, 0x29, 0xb7, 0x1c, 0x7a, 0xea, 0xc5, 0x32, 0x6b, 0x07, 0x46,
	0x61, 0xed, 0xad, 0x3f, 0x20, 0xfc, 0x8b, 0xde, 0xda, 0x9f, 0xdb, 0xb1, 0x01, 0x15, 0x94, 0x1e,
	0x7a, 0x5a, 0xcf, 0x7b, 0x33, 0x9e, 0xe7, 0x79, 0xb3, 0xd0, 0xab, 0x95, 0x45, 0x23, 0xb1, 0x2c,
	0x6a, 0x6b, 0xbc, 0x19, 0xfd, 0xcc, 0xa0, 0xbb, 0x87, 0xb8, 0x14, 0x5e, 0xe4, 0x03, 0x68, 0x07,
	0x8d, 0x2f, 0xdc, 0x63, 0xa5, 0x58, 0xe3, 0xae, 0x31, 0x3e, 0xcd, 0xbb, 0x70, 0xba, 0xc4, 0xf9,
	0xc2, 0xb3, 0x66, 0x0a, 0x2f, 0xa0, 0xe3, 0x55, 0x45, 0x55, 0xc2, 0x07, 0xab, 0x58, 0x96, 0xc0,
	0x3e, 0x9c, 0x2d, 0x42, 0x85, 0x12, 0xfd, 0x86, 0x9d, 0x24, 0xe4, 0x0d, 0x9c, 0xc8, 0xe0, 0x3c,
	0x3b, 0x4d, 0xd1, 0x5b, 0x18, 0xa4, 0x3b, 0xf8, 0x4a, 0x58, 0x14, 0x33, 0x5c, 0xc6, 0xc4, 0xb3,
	0x44, 0x5d, 0x41, 0x6f, 0x4b, 0x79, 0xa3, 0x45, 0xc2, 0xdb, 0x09, 0x67, 0xd0, 0x8f, 0x17, 0x1c,
	0x55, 0x74, 0xf7, 0xcd, 0x12, 0x53, 0x89, 0x17, 0xd6, 0x3b, 0x46, 0x50, 0xb3, 0xf3, 0x84, 0xe4,
	0x00, 0x6b, 0xb1, 0x52, 0xbc, 0x34, 0x41, 0x7b, 0xd6, 0xdf, 0x63, 0x0b, 0xb3, 0x94, 0x3b, 0x6c,
	0x90, 0xb0, 0x77, 0x70, 0x25, 0x82, 0x44, 0xc3, 0x75, 0xa8, 0xb8, 0x44, 0x47, 0x6f, 0x9a, 0x09,
	0x5d, 0x2a, 0xc7, 0xf2, 0xc4, 0x8f, 0xe1, 0x6e, 0xcb, 0xd7, 0x4a, 0x3c, 0x1f, 0x26, 0x70, 0xa5,
	0x95, 0x9d, 0x6f, 0xb8, 0x9c, 0xb1, 0x8b, 0x94, 0xf9, 0x1e, 0x6e, 0x0f, 0x32, 0x67, 0xa2, 0x7c,
	0x9e, 0x5b, 0x6a, 0x24, 0x0f, 0x12, 0x2f, 0x53, 0xe2, 0x0d, 0x5c, 0x1e, 0x24, 0xfe, 0x65, 0x87,
	0x91, 0x1d, 0xfd, 0xce, 0x60, 0x38, 0x13, 0xbe, 0x5c, 0x28, 0xc9, 0x8f, 0xad, 0xb9, 0xa1, 0x89,
	0xd2, 0x97, 0x5c, 0xc9, 0xc6, 0x9d, 0x49, 0xaf, 0x78, 0x65, 0x9c, 0x54, 0x2b, 0x24, 0x61, 0x28,
	0xc9, 0xa9, 0xe6, 0xb8, 0x1d, 0x27, 0xf8, 0x84, 0xb6, 0x5a, 0x0b, 0xab, 0xf8, 0x4a, 0x59, 0x87,
	0x46, 0x93, 0x5d, 0xcd, 0xed, 0x6c, 0x43, 0x1d, 0x2d, 0xe6, 0xa8, 0xb9, 0x53, 0xa5, 0xd1, 0x72,
	0x67, 0x1b, 0xb9, 0x41, 0x91, 0x56, 0xa5, 0xa7, 0xfe, 0xce, 0xd1, 0x5d, 0x2d, 0xc2, 0xdb, 0xf9,
	0x10, 0xba, 0x16, 0xf5, 0x3c, 0xed, 0x05, 0xa7, 0xb7, 0x25, 0x93, 0xda, 0xf9, 0x47, 0x38, 0x71,
	0xa5, 0xd0, 0x0c, 0x92, 0xa6, 0x71, 0xf1, 0x4f, 0xe5, 0xc5, 0x1a, 0x9f, 0x90, 0x8a, 0x68, 0xaa,
	0x8e, 0xd7, 0x06, 0xb5, 0x8f, 0xfb, 0x50, 0x51, 0x24, 0xe6, 0xca, 0x45, 0x09, 0x3f, 0x82, 0x0a,
	0x8a, 0x75, 0xa2, 0x82, 0xeb, 0x5f, 0x0d, 0x18, 0xbc, 0x2e, 0xa0, 0x75, 0x4a, 0x6a, 0x1a, 0xa9,
	0x2d, 0x45, 0x96, 0xc2, 0xdd, 0x46, 0x7e, 0x81, 0x96, 0xd0, 0x5e, 0x69, 0x2d, 0xd2, 0x36, 0xf6,
	0x26, 0x1f, 0xfe, 0x57, 0x47, 0x71, 0xbf, 0xad, 0xfb, 0xb6, 0xa9, 0xd5, 0xe8, 0x16, 0x3a, 0x07,
	0x61, 0xde, 0x82, 0xec, 0xe1, 0xeb, 0x7d, 0xbf, 0x11, 0x0f, 0x8f, 0x9f, 0xa6, 0xfd, 0xe6, 0x74,
	0x02, 0xd7, 0xa5, 0xa9, 0x8a, 0x85, 0x5a, 0x2e, 0x4d, 0xe1, 0x82, 0xc5, 0x3a, 0x14, 0xa2, 0xc6,
	0x02, 0x75, 0x1d, 0xfc, 0xf4, 0xfc, 0x33, 0xb5, 0x78, 0x88, 0xc7, 0xc7, 0xf8, 0x6f, 0xb9, 0xef,
	0x19, 0x71, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x7e, 0xf5, 0x17, 0x72, 0x03, 0x00, 0x00,
}
