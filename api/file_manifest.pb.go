// Code generated by protoc-gen-go.
// source: file_manifest.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FileManifest_FileStatusType int32

const (
	FileManifest_DOWNLOAD_COMPLETED FileManifest_FileStatusType = 0
	FileManifest_DOWNLOAD_PENDING   FileManifest_FileStatusType = 1
)

var FileManifest_FileStatusType_name = map[int32]string{
	0: "DOWNLOAD_COMPLETED",
	1: "DOWNLOAD_PENDING",
}
var FileManifest_FileStatusType_value = map[string]int32{
	"DOWNLOAD_COMPLETED": 0,
	"DOWNLOAD_PENDING":   1,
}

func (x FileManifest_FileStatusType) Enum() *FileManifest_FileStatusType {
	p := new(FileManifest_FileStatusType)
	*p = x
	return p
}
func (x FileManifest_FileStatusType) String() string {
	return proto.EnumName(FileManifest_FileStatusType_name, int32(x))
}
func (x *FileManifest_FileStatusType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileManifest_FileStatusType_value, data, "FileManifest_FileStatusType")
	if err != nil {
		return err
	}
	*x = FileManifest_FileStatusType(value)
	return nil
}
func (FileManifest_FileStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 0}
}

type FileManifest_FileOperationError_ErrorType int32

const (
	FileManifest_FileOperationError_NO_ERROR    FileManifest_FileOperationError_ErrorType = 0
	FileManifest_FileOperationError_READ_ERROR  FileManifest_FileOperationError_ErrorType = 1
	FileManifest_FileOperationError_WRITE_ERROR FileManifest_FileOperationError_ErrorType = 2
)

var FileManifest_FileOperationError_ErrorType_name = map[int32]string{
	0: "NO_ERROR",
	1: "READ_ERROR",
	2: "WRITE_ERROR",
}
var FileManifest_FileOperationError_ErrorType_value = map[string]int32{
	"NO_ERROR":    0,
	"READ_ERROR":  1,
	"WRITE_ERROR": 2,
}

func (x FileManifest_FileOperationError_ErrorType) Enum() *FileManifest_FileOperationError_ErrorType {
	p := new(FileManifest_FileOperationError_ErrorType)
	*p = x
	return p
}
func (x FileManifest_FileOperationError_ErrorType) String() string {
	return proto.EnumName(FileManifest_FileOperationError_ErrorType_name, int32(x))
}
func (x *FileManifest_FileOperationError_ErrorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FileManifest_FileOperationError_ErrorType_value, data, "FileManifest_FileOperationError_ErrorType")
	if err != nil {
		return err
	}
	*x = FileManifest_FileOperationError_ErrorType(value)
	return nil
}
func (FileManifest_FileOperationError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 1, 0}
}

type FileManifest struct {
	FileInfo              []*FileManifest_File               `protobuf:"bytes,1,rep,name=file_info" json:"file_info,omitempty"`
	FileStatus            *FileManifest_FileStatusType       `protobuf:"varint,2,opt,name=file_status,enum=FileManifest_FileStatusType" json:"file_status,omitempty"`
	DeviceUptimeInSeconds *uint32                            `protobuf:"varint,3,opt,name=device_uptime_in_seconds" json:"device_uptime_in_seconds,omitempty"`
	QueryDelay            *uint32                            `protobuf:"varint,4,opt,name=query_delay" json:"query_delay,omitempty"`
	FirmwareVersion       *int32                             `protobuf:"varint,5,opt,name=firmware_version" json:"firmware_version,omitempty"`
	UnixTime              *int32                             `protobuf:"varint,6,opt,name=unix_time" json:"unix_time,omitempty"`
	LinkHealth            *FileManifest_LinkHealth           `protobuf:"bytes,7,opt,name=link_health" json:"link_health,omitempty"`
	SdCardSize            *FileManifest_MemoryInfo           `protobuf:"bytes,8,opt,name=sd_card_size" json:"sd_card_size,omitempty"`
	ErrorInfo             []*FileManifest_FileOperationError `protobuf:"bytes,9,rep,name=error_info" json:"error_info,omitempty"`
	SenseId               *string                            `protobuf:"bytes,10,opt,name=sense_id" json:"sense_id,omitempty"`
	XXX_unrecognized      []byte                             `json:"-"`
}

func (m *FileManifest) Reset()                    { *m = FileManifest{} }
func (m *FileManifest) String() string            { return proto.CompactTextString(m) }
func (*FileManifest) ProtoMessage()               {}
func (*FileManifest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *FileManifest) GetFileInfo() []*FileManifest_File {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func (m *FileManifest) GetFileStatus() FileManifest_FileStatusType {
	if m != nil && m.FileStatus != nil {
		return *m.FileStatus
	}
	return FileManifest_DOWNLOAD_COMPLETED
}

func (m *FileManifest) GetDeviceUptimeInSeconds() uint32 {
	if m != nil && m.DeviceUptimeInSeconds != nil {
		return *m.DeviceUptimeInSeconds
	}
	return 0
}

func (m *FileManifest) GetQueryDelay() uint32 {
	if m != nil && m.QueryDelay != nil {
		return *m.QueryDelay
	}
	return 0
}

func (m *FileManifest) GetFirmwareVersion() int32 {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return 0
}

func (m *FileManifest) GetUnixTime() int32 {
	if m != nil && m.UnixTime != nil {
		return *m.UnixTime
	}
	return 0
}

func (m *FileManifest) GetLinkHealth() *FileManifest_LinkHealth {
	if m != nil {
		return m.LinkHealth
	}
	return nil
}

func (m *FileManifest) GetSdCardSize() *FileManifest_MemoryInfo {
	if m != nil {
		return m.SdCardSize
	}
	return nil
}

func (m *FileManifest) GetErrorInfo() []*FileManifest_FileOperationError {
	if m != nil {
		return m.ErrorInfo
	}
	return nil
}

func (m *FileManifest) GetSenseId() string {
	if m != nil && m.SenseId != nil {
		return *m.SenseId
	}
	return ""
}

type FileManifest_FileDownload struct {
	Host             *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Url              *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	SdCardFilename   *string `protobuf:"bytes,3,opt,name=sd_card_filename" json:"sd_card_filename,omitempty"`
	SdCardPath       *string `protobuf:"bytes,4,opt,name=sd_card_path" json:"sd_card_path,omitempty"`
	Sha1             []byte  `protobuf:"bytes,5,opt,name=sha1" json:"sha1,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileManifest_FileDownload) Reset()                    { *m = FileManifest_FileDownload{} }
func (m *FileManifest_FileDownload) String() string            { return proto.CompactTextString(m) }
func (*FileManifest_FileDownload) ProtoMessage()               {}
func (*FileManifest_FileDownload) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

func (m *FileManifest_FileDownload) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *FileManifest_FileDownload) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *FileManifest_FileDownload) GetSdCardFilename() string {
	if m != nil && m.SdCardFilename != nil {
		return *m.SdCardFilename
	}
	return ""
}

func (m *FileManifest_FileDownload) GetSdCardPath() string {
	if m != nil && m.SdCardPath != nil {
		return *m.SdCardPath
	}
	return ""
}

func (m *FileManifest_FileDownload) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type FileManifest_FileOperationError struct {
	Filename         *string                                    `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	ErrType          *FileManifest_FileOperationError_ErrorType `protobuf:"varint,2,opt,name=err_type,enum=FileManifest_FileOperationError_ErrorType" json:"err_type,omitempty"`
	ErrCode          *int32                                     `protobuf:"varint,3,opt,name=err_code" json:"err_code,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *FileManifest_FileOperationError) Reset()         { *m = FileManifest_FileOperationError{} }
func (m *FileManifest_FileOperationError) String() string { return proto.CompactTextString(m) }
func (*FileManifest_FileOperationError) ProtoMessage()    {}
func (*FileManifest_FileOperationError) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 1}
}

func (m *FileManifest_FileOperationError) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *FileManifest_FileOperationError) GetErrType() FileManifest_FileOperationError_ErrorType {
	if m != nil && m.ErrType != nil {
		return *m.ErrType
	}
	return FileManifest_FileOperationError_NO_ERROR
}

func (m *FileManifest_FileOperationError) GetErrCode() int32 {
	if m != nil && m.ErrCode != nil {
		return *m.ErrCode
	}
	return 0
}

type FileManifest_File struct {
	DownloadInfo     *FileManifest_FileDownload `protobuf:"bytes,1,opt,name=download_info" json:"download_info,omitempty"`
	DeleteFile       *bool                      `protobuf:"varint,2,opt,name=delete_file" json:"delete_file,omitempty"`
	UpdateFile       *bool                      `protobuf:"varint,3,opt,name=update_file" json:"update_file,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *FileManifest_File) Reset()                    { *m = FileManifest_File{} }
func (m *FileManifest_File) String() string            { return proto.CompactTextString(m) }
func (*FileManifest_File) ProtoMessage()               {}
func (*FileManifest_File) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 2} }

func (m *FileManifest_File) GetDownloadInfo() *FileManifest_FileDownload {
	if m != nil {
		return m.DownloadInfo
	}
	return nil
}

func (m *FileManifest_File) GetDeleteFile() bool {
	if m != nil && m.DeleteFile != nil {
		return *m.DeleteFile
	}
	return false
}

func (m *FileManifest_File) GetUpdateFile() bool {
	if m != nil && m.UpdateFile != nil {
		return *m.UpdateFile
	}
	return false
}

type FileManifest_LinkHealth struct {
	SendErrors       *uint32 `protobuf:"varint,1,opt,name=send_errors" json:"send_errors,omitempty"`
	TimeToResponse   *uint32 `protobuf:"varint,2,opt,name=time_to_response" json:"time_to_response,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileManifest_LinkHealth) Reset()                    { *m = FileManifest_LinkHealth{} }
func (m *FileManifest_LinkHealth) String() string            { return proto.CompactTextString(m) }
func (*FileManifest_LinkHealth) ProtoMessage()               {}
func (*FileManifest_LinkHealth) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 3} }

func (m *FileManifest_LinkHealth) GetSendErrors() uint32 {
	if m != nil && m.SendErrors != nil {
		return *m.SendErrors
	}
	return 0
}

func (m *FileManifest_LinkHealth) GetTimeToResponse() uint32 {
	if m != nil && m.TimeToResponse != nil {
		return *m.TimeToResponse
	}
	return 0
}

type FileManifest_MemoryInfo struct {
	TotalMemory      *uint32 `protobuf:"varint,1,opt,name=total_memory" json:"total_memory,omitempty"`
	FreeMemory       *uint32 `protobuf:"varint,2,opt,name=free_memory" json:"free_memory,omitempty"`
	SdCardFailure    *bool   `protobuf:"varint,3,opt,name=sd_card_failure" json:"sd_card_failure,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileManifest_MemoryInfo) Reset()                    { *m = FileManifest_MemoryInfo{} }
func (m *FileManifest_MemoryInfo) String() string            { return proto.CompactTextString(m) }
func (*FileManifest_MemoryInfo) ProtoMessage()               {}
func (*FileManifest_MemoryInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 4} }

func (m *FileManifest_MemoryInfo) GetTotalMemory() uint32 {
	if m != nil && m.TotalMemory != nil {
		return *m.TotalMemory
	}
	return 0
}

func (m *FileManifest_MemoryInfo) GetFreeMemory() uint32 {
	if m != nil && m.FreeMemory != nil {
		return *m.FreeMemory
	}
	return 0
}

func (m *FileManifest_MemoryInfo) GetSdCardFailure() bool {
	if m != nil && m.SdCardFailure != nil {
		return *m.SdCardFailure
	}
	return false
}

func init() {
	proto.RegisterType((*FileManifest)(nil), "FileManifest")
	proto.RegisterType((*FileManifest_FileDownload)(nil), "FileManifest.FileDownload")
	proto.RegisterType((*FileManifest_FileOperationError)(nil), "FileManifest.FileOperationError")
	proto.RegisterType((*FileManifest_File)(nil), "FileManifest.File")
	proto.RegisterType((*FileManifest_LinkHealth)(nil), "FileManifest.LinkHealth")
	proto.RegisterType((*FileManifest_MemoryInfo)(nil), "FileManifest.MemoryInfo")
	proto.RegisterEnum("FileManifest_FileStatusType", FileManifest_FileStatusType_name, FileManifest_FileStatusType_value)
	proto.RegisterEnum("FileManifest_FileOperationError_ErrorType", FileManifest_FileOperationError_ErrorType_name, FileManifest_FileOperationError_ErrorType_value)
}

var fileDescriptor5 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0x51, 0x6b, 0x13, 0x4d,
	0x14, 0xfd, 0xd2, 0xa4, 0x5f, 0x37, 0x77, 0xd3, 0x36, 0x4e, 0x8b, 0x2e, 0x8b, 0x0f, 0xa1, 0x20,
	0x14, 0xc5, 0x85, 0x16, 0x9f, 0x54, 0x04, 0x6b, 0x56, 0x2d, 0xb4, 0x49, 0x89, 0x85, 0x82, 0x2f,
	0xc3, 0xb0, 0x3b, 0x31, 0x83, 0xbb, 0x3b, 0xeb, 0xcc, 0x6c, 0x6b, 0xfc, 0x59, 0xfe, 0x07, 0xff,
	0x97, 0x77, 0x6f, 0x36, 0x69, 0x35, 0x05, 0x5f, 0x02, 0x7b, 0xee, 0x9d, 0x7b, 0xcf, 0x3d, 0xe7,
	0x04, 0xf6, 0xa6, 0x2a, 0x93, 0x3c, 0x17, 0x85, 0x9a, 0x4a, 0xeb, 0xa2, 0xd2, 0x68, 0xa7, 0x0f,
	0x7e, 0x6d, 0x41, 0xef, 0x3d, 0xe2, 0xe7, 0x0d, 0xcc, 0x9e, 0x40, 0x97, 0xfa, 0x54, 0x31, 0xd5,
	0x41, 0x6b, 0xd0, 0x3e, 0xf4, 0x8f, 0x59, 0x74, 0xb7, 0x83, 0x3e, 0xd8, 0x11, 0xf8, 0xd4, 0x66,
	0x9d, 0x70, 0x95, 0x0d, 0x36, 0x06, 0xad, 0xc3, 0x9d, 0xe3, 0xc7, 0xeb, 0x8d, 0x9f, 0xa8, 0x7e,
	0x39, 0x2f, 0x25, 0x1b, 0x40, 0x90, 0xca, 0x6b, 0x95, 0x48, 0x5e, 0x95, 0x4e, 0xe5, 0xf5, 0x0a,
	0x6e, 0x65, 0xa2, 0x8b, 0xd4, 0x06, 0x6d, 0x7c, 0xbf, 0xcd, 0xf6, 0xc0, 0xff, 0x56, 0x49, 0x33,
	0xe7, 0xa9, 0xcc, 0xc4, 0x3c, 0xe8, 0x10, 0x18, 0x40, 0x7f, 0xaa, 0x4c, 0x7e, 0x23, 0x8c, 0xe4,
	0xd7, 0xd2, 0x58, 0xa5, 0x8b, 0x60, 0x13, 0x2b, 0x9b, 0xec, 0x01, 0x74, 0xab, 0x42, 0x7d, 0xe7,
	0xf5, 0xb0, 0xe0, 0x7f, 0x82, 0x9e, 0x83, 0x9f, 0xa9, 0xe2, 0x2b, 0x9f, 0x49, 0x91, 0xb9, 0x59,
	0xb0, 0x85, 0xa0, 0x7f, 0x1c, 0xfc, 0x49, 0xeb, 0x0c, 0x1b, 0x3e, 0x52, 0x9d, 0x45, 0xd0, 0xb3,
	0x29, 0x4f, 0x84, 0x49, 0xb9, 0x55, 0x3f, 0x64, 0xe0, 0xdd, 0xd7, 0x7f, 0x2e, 0x73, 0x6d, 0xe6,
	0xa7, 0xa8, 0x07, 0x7b, 0x01, 0x20, 0x8d, 0xd1, 0x66, 0xa1, 0x4e, 0x97, 0xd4, 0x19, 0xac, 0x1f,
	0x3d, 0x2e, 0xa5, 0x11, 0x0e, 0x89, 0xc6, 0x75, 0x33, 0xeb, 0x83, 0x67, 0x65, 0x61, 0xf1, 0xe0,
	0x34, 0x00, 0xdc, 0xd0, 0x0d, 0xbf, 0x2c, 0x44, 0x1f, 0xea, 0x9b, 0x22, 0xd3, 0x22, 0x65, 0x3d,
	0xe8, 0xcc, 0xb4, 0x75, 0xa8, 0x37, 0x56, 0x99, 0x0f, 0xed, 0xca, 0x64, 0xa4, 0x69, 0xb7, 0x3e,
	0x7f, 0x49, 0xb1, 0x16, 0xbc, 0x10, 0x78, 0x6b, 0x9b, 0x2a, 0xfb, 0xb7, 0xe4, 0x4b, 0x81, 0xc7,
	0x76, 0x08, 0xc5, 0x51, 0x76, 0x26, 0x8e, 0x48, 0xa2, 0x5e, 0xf8, 0xb3, 0x05, 0xec, 0x7e, 0x46,
	0xab, 0x61, 0x8b, 0x9d, 0xaf, 0xc1, 0xc3, 0xcb, 0xb8, 0x43, 0xa3, 0x1a, 0x33, 0x9f, 0xfe, 0xeb,
	0xae, 0x88, 0x7e, 0xc9, 0xda, 0xfe, 0xe2, 0x75, 0xa2, 0xd3, 0x05, 0xb9, 0xcd, 0x83, 0x97, 0xd0,
	0xbd, 0x2d, 0xf7, 0xc0, 0x1b, 0x8d, 0x79, 0x3c, 0x99, 0x8c, 0x27, 0xfd, 0xff, 0xd8, 0x0e, 0xc0,
	0x24, 0x7e, 0x3b, 0x6c, 0xbe, 0x5b, 0x6c, 0x17, 0xfc, 0xab, 0xc9, 0xe9, 0x65, 0xdc, 0x00, 0x1b,
	0x61, 0x02, 0x9d, 0x26, 0x63, 0xdb, 0x69, 0xa3, 0xd0, 0x32, 0x8e, 0xb5, 0x3d, 0xe1, 0x3a, 0xb1,
	0x95, 0x90, 0x98, 0x20, 0xcc, 0x8e, 0x74, 0x92, 0xc4, 0xa2, 0x4b, 0xbc, 0x1a, 0xac, 0xca, 0x54,
	0x2c, 0xc1, 0x9a, 0xa0, 0x17, 0xbe, 0x02, 0xb8, 0x13, 0x04, 0x6c, 0x41, 0x8b, 0x52, 0x4e, 0xee,
	0x5a, 0x5a, 0x44, 0xc9, 0xa3, 0x9c, 0x3a, 0xcd, 0x8d, 0xb4, 0xa5, 0x46, 0x0b, 0x69, 0xe2, 0x76,
	0x78, 0x01, 0x70, 0x27, 0x15, 0x68, 0x84, 0xd3, 0x4e, 0x64, 0x3c, 0x27, 0xac, 0x79, 0x8d, 0x23,
	0xa7, 0x46, 0xca, 0x25, 0x48, 0x0f, 0xd9, 0x23, 0xd8, 0x5d, 0xb9, 0x29, 0x54, 0x56, 0x99, 0x86,
	0xce, 0xc1, 0x1b, 0xd8, 0xf9, 0xeb, 0xef, 0xf2, 0x10, 0xd8, 0x70, 0x7c, 0x35, 0x3a, 0x1b, 0xa3,
	0x54, 0xef, 0xc6, 0xe7, 0x17, 0x67, 0xf1, 0x65, 0x3c, 0x44, 0xf9, 0xf6, 0xa1, 0xbf, 0xc2, 0x2f,
	0xe2, 0xd1, 0xf0, 0x74, 0xf4, 0xa1, 0xdf, 0x3a, 0x79, 0x06, 0x61, 0xa2, 0xf3, 0x68, 0x26, 0xb3,
	0x4c, 0x47, 0xb6, 0x32, 0xaa, 0xac, 0x22, 0x51, 0xaa, 0x48, 0x15, 0x65, 0xe5, 0x4e, 0x3c, 0x9a,
	0x3d, 0x2f, 0x92, 0xcf, 0x6d, 0x04, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x52, 0x97, 0x09,
	0x0a, 0x04, 0x00, 0x00,
}
