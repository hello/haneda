// Code generated by protoc-gen-go.
// source: periodic.server.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BatchedPeriodicDataWifiAccessPoint_AntennaType int32

const (
	BatchedPeriodicDataWifiAccessPoint_IFA BatchedPeriodicDataWifiAccessPoint_AntennaType = 1
	BatchedPeriodicDataWifiAccessPoint_PCB BatchedPeriodicDataWifiAccessPoint_AntennaType = 2
)

var BatchedPeriodicDataWifiAccessPoint_AntennaType_name = map[int32]string{
	1: "IFA",
	2: "PCB",
}
var BatchedPeriodicDataWifiAccessPoint_AntennaType_value = map[string]int32{
	"IFA": 1,
	"PCB": 2,
}

func (x BatchedPeriodicDataWifiAccessPoint_AntennaType) Enum() *BatchedPeriodicDataWifiAccessPoint_AntennaType {
	p := new(BatchedPeriodicDataWifiAccessPoint_AntennaType)
	*p = x
	return p
}
func (x BatchedPeriodicDataWifiAccessPoint_AntennaType) String() string {
	return proto.EnumName(BatchedPeriodicDataWifiAccessPoint_AntennaType_name, int32(x))
}
func (x *BatchedPeriodicDataWifiAccessPoint_AntennaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BatchedPeriodicDataWifiAccessPoint_AntennaType_value, data, "BatchedPeriodicDataWifiAccessPoint_AntennaType")
	if err != nil {
		return err
	}
	*x = BatchedPeriodicDataWifiAccessPoint_AntennaType(value)
	return nil
}
func (BatchedPeriodicDataWifiAccessPoint_AntennaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0, 0}
}

type PeriodicData struct {
	UnixTime         *int32  `protobuf:"varint,1,opt,name=unix_time" json:"unix_time,omitempty"`
	Light            *int32  `protobuf:"varint,2,opt,name=light" json:"light,omitempty"`
	Temperature      *int32  `protobuf:"varint,3,opt,name=temperature" json:"temperature,omitempty"`
	Humidity         *int32  `protobuf:"varint,4,opt,name=humidity" json:"humidity,omitempty"`
	Dust             *int32  `protobuf:"varint,5,opt,name=dust" json:"dust,omitempty"`
	Name             *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Mac              []byte  `protobuf:"bytes,7,opt,name=mac" json:"mac,omitempty"`
	LightVariability *int32  `protobuf:"varint,8,opt,name=light_variability" json:"light_variability,omitempty"`
	LightTonality    *int32  `protobuf:"varint,9,opt,name=light_tonality" json:"light_tonality,omitempty"`
	FirmwareVersion  *int32  `protobuf:"varint,10,opt,name=firmware_version" json:"firmware_version,omitempty"`
	// Please do not reuse index 11, it's for the removed pill_data.
	DeviceId                     *string `protobuf:"bytes,12,opt,name=device_id" json:"device_id,omitempty"`
	DustVariability              *int32  `protobuf:"varint,13,opt,name=dust_variability" json:"dust_variability,omitempty"`
	DustMax                      *int32  `protobuf:"varint,14,opt,name=dust_max" json:"dust_max,omitempty"`
	DustMin                      *int32  `protobuf:"varint,15,opt,name=dust_min" json:"dust_min,omitempty"`
	WaveCount                    *int32  `protobuf:"varint,16,opt,name=wave_count" json:"wave_count,omitempty"`
	HoldCount                    *int32  `protobuf:"varint,17,opt,name=hold_count" json:"hold_count,omitempty"`
	AudioNumDisturbances         *int32  `protobuf:"varint,18,opt,name=audio_num_disturbances" json:"audio_num_disturbances,omitempty"`
	AudioPeakDisturbanceEnergyDb *int32  `protobuf:"varint,19,opt,name=audio_peak_disturbance_energy_db" json:"audio_peak_disturbance_energy_db,omitempty"`
	AudioPeakBackgroundEnergyDb  *int32  `protobuf:"varint,20,opt,name=audio_peak_background_energy_db" json:"audio_peak_background_energy_db,omitempty"`
	AudioPeakEnergyDb            *int32  `protobuf:"varint,21,opt,name=audio_peak_energy_db" json:"audio_peak_energy_db,omitempty"`
	XXX_unrecognized             []byte  `json:"-"`
}

func (m *PeriodicData) Reset()                    { *m = PeriodicData{} }
func (m *PeriodicData) String() string            { return proto.CompactTextString(m) }
func (*PeriodicData) ProtoMessage()               {}
func (*PeriodicData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PeriodicData) GetUnixTime() int32 {
	if m != nil && m.UnixTime != nil {
		return *m.UnixTime
	}
	return 0
}

func (m *PeriodicData) GetLight() int32 {
	if m != nil && m.Light != nil {
		return *m.Light
	}
	return 0
}

func (m *PeriodicData) GetTemperature() int32 {
	if m != nil && m.Temperature != nil {
		return *m.Temperature
	}
	return 0
}

func (m *PeriodicData) GetHumidity() int32 {
	if m != nil && m.Humidity != nil {
		return *m.Humidity
	}
	return 0
}

func (m *PeriodicData) GetDust() int32 {
	if m != nil && m.Dust != nil {
		return *m.Dust
	}
	return 0
}

func (m *PeriodicData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PeriodicData) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *PeriodicData) GetLightVariability() int32 {
	if m != nil && m.LightVariability != nil {
		return *m.LightVariability
	}
	return 0
}

func (m *PeriodicData) GetLightTonality() int32 {
	if m != nil && m.LightTonality != nil {
		return *m.LightTonality
	}
	return 0
}

func (m *PeriodicData) GetFirmwareVersion() int32 {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return 0
}

func (m *PeriodicData) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *PeriodicData) GetDustVariability() int32 {
	if m != nil && m.DustVariability != nil {
		return *m.DustVariability
	}
	return 0
}

func (m *PeriodicData) GetDustMax() int32 {
	if m != nil && m.DustMax != nil {
		return *m.DustMax
	}
	return 0
}

func (m *PeriodicData) GetDustMin() int32 {
	if m != nil && m.DustMin != nil {
		return *m.DustMin
	}
	return 0
}

func (m *PeriodicData) GetWaveCount() int32 {
	if m != nil && m.WaveCount != nil {
		return *m.WaveCount
	}
	return 0
}

func (m *PeriodicData) GetHoldCount() int32 {
	if m != nil && m.HoldCount != nil {
		return *m.HoldCount
	}
	return 0
}

func (m *PeriodicData) GetAudioNumDisturbances() int32 {
	if m != nil && m.AudioNumDisturbances != nil {
		return *m.AudioNumDisturbances
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakDisturbanceEnergyDb() int32 {
	if m != nil && m.AudioPeakDisturbanceEnergyDb != nil {
		return *m.AudioPeakDisturbanceEnergyDb
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakBackgroundEnergyDb() int32 {
	if m != nil && m.AudioPeakBackgroundEnergyDb != nil {
		return *m.AudioPeakBackgroundEnergyDb
	}
	return 0
}

func (m *PeriodicData) GetAudioPeakEnergyDb() int32 {
	if m != nil && m.AudioPeakEnergyDb != nil {
		return *m.AudioPeakEnergyDb
	}
	return 0
}

type BatchedPeriodicData struct {
	Data            []*PeriodicData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	DeviceId        *string         `protobuf:"bytes,2,req,name=device_id" json:"device_id,omitempty"`
	FirmwareVersion *int32          `protobuf:"varint,3,req,name=firmware_version" json:"firmware_version,omitempty"`
	UptimeInSecond  *int32          `protobuf:"varint,4,opt,name=uptime_in_second" json:"uptime_in_second,omitempty"`
	// Commenting the following out until we figure why it fails to parse
	ConnectedSsid *string `protobuf:"bytes,7,opt,name=connected_ssid" json:"connected_ssid,omitempty"`
	// repeated wifi_access_point scan = 8;
	// optional string ring_time_ack = 9;
	Scan             []*BatchedPeriodicDataWifiAccessPoint `protobuf:"bytes,10,rep,name=scan" json:"scan,omitempty"`
	MessagesInQueue  *int32                                `protobuf:"varint,11,opt,name=messages_in_queue" json:"messages_in_queue,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *BatchedPeriodicData) Reset()                    { *m = BatchedPeriodicData{} }
func (m *BatchedPeriodicData) String() string            { return proto.CompactTextString(m) }
func (*BatchedPeriodicData) ProtoMessage()               {}
func (*BatchedPeriodicData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BatchedPeriodicData) GetData() []*PeriodicData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchedPeriodicData) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *BatchedPeriodicData) GetFirmwareVersion() int32 {
	if m != nil && m.FirmwareVersion != nil {
		return *m.FirmwareVersion
	}
	return 0
}

func (m *BatchedPeriodicData) GetUptimeInSecond() int32 {
	if m != nil && m.UptimeInSecond != nil {
		return *m.UptimeInSecond
	}
	return 0
}

func (m *BatchedPeriodicData) GetConnectedSsid() string {
	if m != nil && m.ConnectedSsid != nil {
		return *m.ConnectedSsid
	}
	return ""
}

func (m *BatchedPeriodicData) GetScan() []*BatchedPeriodicDataWifiAccessPoint {
	if m != nil {
		return m.Scan
	}
	return nil
}

func (m *BatchedPeriodicData) GetMessagesInQueue() int32 {
	if m != nil && m.MessagesInQueue != nil {
		return *m.MessagesInQueue
	}
	return 0
}

type BatchedPeriodicDataWifiAccessPoint struct {
	Ssid             *string                                         `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Rssi             *int32                                          `protobuf:"varint,2,opt,name=rssi" json:"rssi,omitempty"`
	Antenna          *BatchedPeriodicDataWifiAccessPoint_AntennaType `protobuf:"varint,3,opt,name=antenna,enum=BatchedPeriodicDataWifiAccessPoint_AntennaType" json:"antenna,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *BatchedPeriodicDataWifiAccessPoint) Reset()         { *m = BatchedPeriodicDataWifiAccessPoint{} }
func (m *BatchedPeriodicDataWifiAccessPoint) String() string { return proto.CompactTextString(m) }
func (*BatchedPeriodicDataWifiAccessPoint) ProtoMessage()    {}
func (*BatchedPeriodicDataWifiAccessPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetSsid() string {
	if m != nil && m.Ssid != nil {
		return *m.Ssid
	}
	return ""
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetRssi() int32 {
	if m != nil && m.Rssi != nil {
		return *m.Rssi
	}
	return 0
}

func (m *BatchedPeriodicDataWifiAccessPoint) GetAntenna() BatchedPeriodicDataWifiAccessPoint_AntennaType {
	if m != nil && m.Antenna != nil {
		return *m.Antenna
	}
	return BatchedPeriodicDataWifiAccessPoint_IFA
}

type AccountMetadata struct {
	AccountId        *int64  `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Timezone         *string `protobuf:"bytes,2,opt,name=timezone" json:"timezone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountMetadata) Reset()                    { *m = AccountMetadata{} }
func (m *AccountMetadata) String() string            { return proto.CompactTextString(m) }
func (*AccountMetadata) ProtoMessage()               {}
func (*AccountMetadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AccountMetadata) GetAccountId() int64 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *AccountMetadata) GetTimezone() string {
	if m != nil && m.Timezone != nil {
		return *m.Timezone
	}
	return ""
}

type BatchPeriodicDataWorker struct {
	Data                  *BatchedPeriodicData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	IpAddress             *string              `protobuf:"bytes,2,opt,name=ip_address" json:"ip_address,omitempty"`
	ReceivedAt            *int64               `protobuf:"varint,3,opt,name=received_at" json:"received_at,omitempty"`
	UptimeInSecond        *int32               `protobuf:"varint,4,opt,name=uptime_in_second" json:"uptime_in_second,omitempty"`
	Timezones             []*AccountMetadata   `protobuf:"bytes,5,rep,name=timezones" json:"timezones,omitempty"`
	FirmwareMiddleVersion *string              `protobuf:"bytes,6,opt,name=firmware_middle_version" json:"firmware_middle_version,omitempty"`
	FirmwareTopVersion    *string              `protobuf:"bytes,7,opt,name=firmware_top_version" json:"firmware_top_version,omitempty"`
	XXX_unrecognized      []byte               `json:"-"`
}

func (m *BatchPeriodicDataWorker) Reset()                    { *m = BatchPeriodicDataWorker{} }
func (m *BatchPeriodicDataWorker) String() string            { return proto.CompactTextString(m) }
func (*BatchPeriodicDataWorker) ProtoMessage()               {}
func (*BatchPeriodicDataWorker) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BatchPeriodicDataWorker) GetData() *BatchedPeriodicData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BatchPeriodicDataWorker) GetIpAddress() string {
	if m != nil && m.IpAddress != nil {
		return *m.IpAddress
	}
	return ""
}

func (m *BatchPeriodicDataWorker) GetReceivedAt() int64 {
	if m != nil && m.ReceivedAt != nil {
		return *m.ReceivedAt
	}
	return 0
}

func (m *BatchPeriodicDataWorker) GetUptimeInSecond() int32 {
	if m != nil && m.UptimeInSecond != nil {
		return *m.UptimeInSecond
	}
	return 0
}

func (m *BatchPeriodicDataWorker) GetTimezones() []*AccountMetadata {
	if m != nil {
		return m.Timezones
	}
	return nil
}

func (m *BatchPeriodicDataWorker) GetFirmwareMiddleVersion() string {
	if m != nil && m.FirmwareMiddleVersion != nil {
		return *m.FirmwareMiddleVersion
	}
	return ""
}

func (m *BatchPeriodicDataWorker) GetFirmwareTopVersion() string {
	if m != nil && m.FirmwareTopVersion != nil {
		return *m.FirmwareTopVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*PeriodicData)(nil), "periodic_data")
	proto.RegisterType((*BatchedPeriodicData)(nil), "batched_periodic_data")
	proto.RegisterType((*BatchedPeriodicDataWifiAccessPoint)(nil), "batched_periodic_data.wifi_access_point")
	proto.RegisterType((*AccountMetadata)(nil), "AccountMetadata")
	proto.RegisterType((*BatchPeriodicDataWorker)(nil), "BatchPeriodicDataWorker")
	proto.RegisterEnum("BatchedPeriodicDataWifiAccessPoint_AntennaType", BatchedPeriodicDataWifiAccessPoint_AntennaType_name, BatchedPeriodicDataWifiAccessPoint_AntennaType_value)
}

var fileDescriptor1 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x4e, 0x1b, 0x3b,
	0x10, 0x56, 0xb2, 0x70, 0x42, 0x26, 0x10, 0x92, 0xe5, 0xcf, 0x07, 0xa1, 0x03, 0xca, 0x39, 0xd2,
	0xc9, 0xd5, 0x5e, 0xa0, 0xaa, 0xbd, 0x26, 0xfd, 0x91, 0xb8, 0xa8, 0xc4, 0x45, 0xa5, 0x4a, 0xbd,
	0xb1, 0x9c, 0xf5, 0x90, 0x58, 0x64, 0xed, 0xad, 0xed, 0x0d, 0xd0, 0xbb, 0x3e, 0x45, 0x5f, 0xad,
	0x4f, 0xd0, 0xe7, 0xe8, 0xd8, 0x9b, 0x84, 0x50, 0x50, 0xd5, 0xab, 0xec, 0xcc, 0x37, 0x9e, 0xf9,
	0x3c, 0xdf, 0xe7, 0xc0, 0x41, 0x89, 0x56, 0x19, 0xa9, 0xf2, 0xcc, 0xa1, 0x9d, 0xa3, 0xcd, 0x4a,
	0x6b, 0xbc, 0x19, 0x7c, 0x4f, 0x60, 0x67, 0x89, 0x70, 0x29, 0xbc, 0x48, 0xfb, 0xd0, 0xae, 0xb4,
	0xba, 0xe3, 0x5e, 0x15, 0xc8, 0x1a, 0x67, 0x8d, 0xe1, 0x66, 0xba, 0x03, 0x9b, 0x33, 0x35, 0x99,
	0x7a, 0xd6, 0x8c, 0xe1, 0x1e, 0x74, 0x3c, 0x16, 0x74, 0x4a, 0xf8, 0xca, 0x22, 0x4b, 0x62, 0xb2,
	0x07, 0x5b, 0xd3, 0xaa, 0x50, 0x52, 0xf9, 0x7b, 0xb6, 0x11, 0x33, 0xdb, 0xb0, 0x21, 0x2b, 0xe7,
	0xd9, 0xe6, 0x32, 0xd2, 0x82, 0x3a, 0xfe, 0x45, 0x51, 0x3b, 0xed, 0x40, 0x52, 0x88, 0x9c, 0xb5,
	0x28, 0xd8, 0x4e, 0xff, 0x86, 0x7e, 0x6c, 0xcf, 0xe7, 0xc2, 0x2a, 0x31, 0x56, 0xb3, 0xd0, 0x63,
	0x2b, 0x9e, 0x3a, 0x84, 0x6e, 0x0d, 0x79, 0xa3, 0x45, 0xcc, 0xb7, 0x63, 0x9e, 0x41, 0xef, 0x5a,
	0xd9, 0xe2, 0x56, 0x58, 0xe4, 0x74, 0x19, 0xa7, 0x8c, 0x66, 0x10, 0x11, 0xa2, 0x2f, 0x71, 0xae,
	0x72, 0xe4, 0x4a, 0xb2, 0xed, 0x38, 0x8c, 0x8a, 0x03, 0x91, 0x47, 0xed, 0x77, 0x96, 0xa4, 0x23,
	0x52, 0x88, 0x3b, 0xd6, 0x7d, 0x9c, 0x51, 0x9a, 0xed, 0xc6, 0x4c, 0x0a, 0x70, 0x2b, 0xe6, 0xc8,
	0x73, 0x53, 0x69, 0xcf, 0x7a, 0xcb, 0xdc, 0xd4, 0xcc, 0xe4, 0x22, 0xd7, 0x8f, 0xb9, 0x7f, 0xe0,
	0x50, 0x54, 0x52, 0x19, 0xae, 0xab, 0x82, 0x4b, 0xe5, 0x68, 0x37, 0x63, 0xa1, 0x73, 0x74, 0x2c,
	0x8d, 0xf8, 0x10, 0xce, 0x6a, 0xbc, 0x44, 0x71, 0xb3, 0x5e, 0xc0, 0x51, 0xa3, 0x9d, 0xdc, 0x73,
	0x39, 0x66, 0x7b, 0xb1, 0xf2, 0x7f, 0x38, 0x5d, 0xab, 0x1c, 0x8b, 0xfc, 0x66, 0x62, 0x69, 0x90,
	0x5c, 0x2b, 0xdc, 0x8f, 0x85, 0x27, 0xb0, 0xbf, 0x56, 0xf8, 0x80, 0x1e, 0x04, 0x74, 0xf0, 0x35,
	0x81, 0x83, 0xb1, 0xf0, 0xf9, 0x14, 0x25, 0x7f, 0x2c, 0xf1, 0x09, 0x29, 0x43, 0xbf, 0xa4, 0x6e,
	0x32, 0xec, 0x9c, 0x77, 0xb3, 0x27, 0x06, 0x78, 0xd8, 0x60, 0xf3, 0xac, 0x59, 0x6f, 0xf0, 0xc9,
	0xba, 0x13, 0x42, 0xa2, 0x10, 0x55, 0x19, 0xac, 0xc2, 0x95, 0xe6, 0x0e, 0x73, 0xa3, 0xe5, 0x42,
	0x7e, 0x92, 0x8e, 0x22, 0x8d, 0xb9, 0xa7, 0xf9, 0xce, 0x51, 0xaf, 0x56, 0x54, 0xe3, 0x25, 0x6c,
	0xb8, 0x5c, 0x04, 0xb9, 0xc2, 0xf0, 0x61, 0xf6, 0x2c, 0xc5, 0xec, 0x56, 0x5d, 0x2b, 0x2e, 0x72,
	0x5a, 0x9f, 0xe3, 0xa5, 0x51, 0xda, 0x07, 0x97, 0x14, 0x14, 0x89, 0x09, 0xba, 0x30, 0xeb, 0x73,
	0x85, 0x15, 0xb2, 0x4e, 0x18, 0x75, 0xfc, 0xad, 0x01, 0xfd, 0xa7, 0x07, 0xc8, 0x71, 0x71, 0x6c,
	0x23, 0x8e, 0xa5, 0xc8, 0x52, 0xb8, 0xb0, 0xf0, 0x5b, 0x68, 0x09, 0xed, 0x51, 0x6b, 0x11, 0xed,
	0xdb, 0x3d, 0x7f, 0xf1, 0xa7, 0x3c, 0xb2, 0x8b, 0xfa, 0xdc, 0x87, 0xfb, 0x12, 0x07, 0xa7, 0xd0,
	0x59, 0x0b, 0xd3, 0x16, 0x24, 0x97, 0xef, 0x2e, 0x7a, 0x8d, 0xf0, 0x71, 0xf5, 0x7a, 0xd4, 0x6b,
	0x0e, 0x5e, 0xc1, 0xee, 0x45, 0x1e, 0x5d, 0xf2, 0x1e, 0xbd, 0x88, 0xeb, 0x25, 0xef, 0x88, 0x3a,
	0xc5, 0x17, 0xe4, 0x92, 0xe0, 0xba, 0xb0, 0xc3, 0x2f, 0x46, 0x63, 0x24, 0xd8, 0x1e, 0xfc, 0x68,
	0xc0, 0xd1, 0x28, 0x30, 0xba, 0x5a, 0xd0, 0x79, 0x43, 0x67, 0x3f, 0x1a, 0x7b, 0x83, 0x36, 0xfd,
	0x6f, 0x25, 0x5f, 0x83, 0x36, 0x78, 0xf8, 0x3c, 0xf3, 0x30, 0x47, 0x95, 0x5c, 0x48, 0x69, 0x89,
	0x7b, 0xdd, 0x35, 0xbc, 0x5c, 0x8b, 0x39, 0xaa, 0x39, 0x55, 0x0b, 0x1f, 0xaf, 0x9e, 0xfc, 0x46,
	0xc2, 0x7f, 0xa1, 0xbd, 0xa4, 0xe5, 0xe8, 0x19, 0x07, 0xbd, 0x7a, 0xd9, 0xaf, 0xf7, 0x39, 0x85,
	0xa3, 0x95, 0x37, 0xe8, 0xfd, 0xcb, 0xd9, 0x83, 0x45, 0xea, 0xb7, 0x4e, 0x2e, 0x5d, 0x15, 0x78,
	0x53, 0xae, 0xd0, 0x68, 0x87, 0xd1, 0x39, 0x1c, 0xe7, 0xa6, 0xc8, 0xa6, 0x38, 0x9b, 0x99, 0xcc,
	0x55, 0x56, 0x95, 0x55, 0x26, 0x4a, 0x95, 0x29, 0x5d, 0x56, 0x7e, 0xb4, 0x1b, 0xae, 0x7d, 0x19,
	0x3e, 0xaf, 0xc2, 0xdf, 0x95, 0xfb, 0x94, 0x10, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xc9,
	0x33, 0x35, 0xcc, 0x04, 0x00, 0x00,
}
