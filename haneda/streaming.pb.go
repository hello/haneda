// Code generated by protoc-gen-go.
// source: streaming.proto
// DO NOT EDIT!

/*
Package haneda is a generated protocol buffer package.

It is generated from these files:
	streaming.proto

It has these top-level messages:
	Preamble
*/
package haneda

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PreamblePbType int32

const (
	Preamble_ACK                   PreamblePbType = 0
	Preamble_BATCHED_PERIODIC_DATA PreamblePbType = 1
	Preamble_SENSE_LOG             PreamblePbType = 2
	Preamble_SYNC_RESPONSE         PreamblePbType = 3
	Preamble_MATRIX_CLIENT_MESSAGE PreamblePbType = 4
	Preamble_MESSEJI               PreamblePbType = 5
)

var PreamblePbType_name = map[int32]string{
	0: "ACK",
	1: "BATCHED_PERIODIC_DATA",
	2: "SENSE_LOG",
	3: "SYNC_RESPONSE",
	4: "MATRIX_CLIENT_MESSAGE",
	5: "MESSEJI",
}
var PreamblePbType_value = map[string]int32{
	"ACK": 0,
	"BATCHED_PERIODIC_DATA": 1,
	"SENSE_LOG":             2,
	"SYNC_RESPONSE":         3,
	"MATRIX_CLIENT_MESSAGE": 4,
	"MESSEJI":               5,
}

func (x PreamblePbType) Enum() *PreamblePbType {
	p := new(PreamblePbType)
	*p = x
	return p
}
func (x PreamblePbType) String() string {
	return proto.EnumName(PreamblePbType_name, int32(x))
}
func (x *PreamblePbType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PreamblePbType_value, data, "PreamblePbType")
	if err != nil {
		return err
	}
	*x = PreamblePbType(value)
	return nil
}
func (PreamblePbType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PreambleAuthType int32

const (
	Preamble_NO_AUTH   PreambleAuthType = 0
	Preamble_HMAC      PreambleAuthType = 1
	Preamble_HMAC_SHA1 PreambleAuthType = 2
)

var PreambleAuthType_name = map[int32]string{
	0: "NO_AUTH",
	1: "HMAC",
	2: "HMAC_SHA1",
}
var PreambleAuthType_value = map[string]int32{
	"NO_AUTH":   0,
	"HMAC":      1,
	"HMAC_SHA1": 2,
}

func (x PreambleAuthType) Enum() *PreambleAuthType {
	p := new(PreambleAuthType)
	*p = x
	return p
}
func (x PreambleAuthType) String() string {
	return proto.EnumName(PreambleAuthType_name, int32(x))
}
func (x *PreambleAuthType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PreambleAuthType_value, data, "PreambleAuthType")
	if err != nil {
		return err
	}
	*x = PreambleAuthType(value)
	return nil
}
func (PreambleAuthType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Preamble struct {
	Type             *PreamblePbType   `protobuf:"varint,1,req,name=type,enum=PreamblePbType" json:"type,omitempty"`
	Id               *uint64           `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Auth             *PreambleAuthType `protobuf:"varint,3,opt,name=auth,enum=PreambleAuthType" json:"auth,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Preamble) Reset()                    { *m = Preamble{} }
func (m *Preamble) String() string            { return proto.CompactTextString(m) }
func (*Preamble) ProtoMessage()               {}
func (*Preamble) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Preamble) GetType() PreamblePbType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Preamble_ACK
}

func (m *Preamble) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Preamble) GetAuth() PreambleAuthType {
	if m != nil && m.Auth != nil {
		return *m.Auth
	}
	return Preamble_NO_AUTH
}

func init() {
	proto.RegisterType((*Preamble)(nil), "Preamble")
	proto.RegisterEnum("PreamblePbType", PreamblePbType_name, PreamblePbType_value)
	proto.RegisterEnum("PreambleAuthType", PreambleAuthType_name, PreambleAuthType_value)
}

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x8e, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x3f, 0xa6, 0xfd, 0x2c, 0x5c, 0x03, 0x0e, 0xa3, 0x26, 0x75, 0xa3, 0xd8, 0x15, 0xab,
	0x49, 0xe0, 0x0d, 0x86, 0xe9, 0x84, 0x56, 0xe9, 0x9f, 0x74, 0x6a, 0xa2, 0x6e, 0x26, 0x45, 0x1a,
	0xdb, 0xa4, 0xd0, 0x06, 0x6b, 0x8c, 0x2f, 0xe0, 0x73, 0xdb, 0x91, 0xa0, 0xbb, 0x7b, 0xce, 0xef,
	0x9c, 0x9c, 0x0b, 0x67, 0x6f, 0xed, 0x3e, 0xcf, 0xb6, 0xe5, 0xee, 0x95, 0x36, 0xfb, 0xba, 0xad,
	0x9d, 0x2f, 0x04, 0xfd, 0x58, 0x5b, 0xeb, 0x2a, 0x27, 0x37, 0x60, 0xb6, 0x9f, 0x4d, 0x6e, 0xf7,
	0x26, 0x68, 0x3a, 0x9a, 0x8f, 0xe9, 0x11, 0xd0, 0x66, 0xad, 0x34, 0x20, 0x00, 0xa8, 0xdc, 0xd8,
	0x68, 0xd2, 0x9b, 0x9a, 0xe4, 0x16, 0xcc, 0xec, 0xbd, 0x2d, 0x6c, 0xa3, 0x53, 0xa3, 0xf9, 0xf9,
	0x5f, 0x58, 0xbb, 0x3f, 0x71, 0xe7, 0x03, 0xac, 0x63, 0xd3, 0x02, 0x83, 0xf1, 0x7b, 0xfc, 0x8f,
	0x5c, 0xc1, 0xe5, 0x82, 0xa5, 0xdc, 0x13, 0xae, 0x8a, 0x45, 0xe2, 0x47, 0xae, 0xcf, 0x95, 0xcb,
	0x52, 0x86, 0x7b, 0x64, 0x08, 0x03, 0x29, 0x42, 0x29, 0xd4, 0x2a, 0x5a, 0x62, 0x44, 0xc6, 0x30,
	0x94, 0x4f, 0x21, 0x57, 0x89, 0x90, 0x71, 0xd4, 0xd9, 0xd8, 0xd0, 0xe5, 0x80, 0xa5, 0x89, 0xff,
	0xa8, 0xf8, 0xca, 0x17, 0x61, 0xaa, 0x02, 0x21, 0x25, 0x5b, 0x0a, 0x6c, 0x92, 0x53, 0xb0, 0xb4,
	0x10, 0x77, 0x3e, 0xfe, 0xef, 0xcc, 0x60, 0xf0, 0xfb, 0x85, 0x26, 0x61, 0xa4, 0xd8, 0x43, 0xea,
	0x75, 0xf3, 0x7d, 0x30, 0xbd, 0x80, 0xf1, 0xc3, 0x9a, 0xbe, 0x94, 0xf4, 0xd8, 0x0c, 0xa3, 0xc5,
	0x35, 0x5c, 0xbc, 0xd4, 0x5b, 0x5a, 0xe4, 0x55, 0x55, 0xd3, 0x22, 0xdb, 0xe5, 0x9b, 0x8c, 0x66,
	0x4d, 0xf9, 0x7c, 0x72, 0xb8, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x15, 0x09, 0x28, 0x3a,
	0x01, 0x00, 0x00,
}
